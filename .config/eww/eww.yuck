;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;							Variable Section's							 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defpoll memory :interval "15s" `printf $(free -m | grep Speicher: | awk '{print ($3/$2)*100}')`)
(defpoll mem-ad-total :interval "30s" `printf  $(free -m | grep Speicher: | awk '{print $2}' )`)
(defpoll mem-ad-used :interval "30s" `printf  $(free -m | grep Speicher: | awk '{print $3}' )`)
(defpoll mem-ad-free :interval "30s" `printf  $(free -m | grep Speicher: | awk '{print ($2 - $3)}' )`)
(defpoll COL_WLAN :interval "1m" "~/.config/eww/scripts/wifi.sh --COL")
(defpoll ESSID_WLAN :interval "1m" "~/.config/eww/scripts/wifi.sh --ESSID")
(defpoll WLAN_ICON :interval "1m" "~/.config/eww/scripts/wifi.sh --ICON")
(defpoll clock_time :interval "1m" "date +\%H")
(defpoll clock_minute :interval "5s" "date +\%M")
(defpoll clock_date :interval "10h" "date '+%d/%m'")
(defpoll calendar_day :interval "20h" "date '+%d'")
(defpoll calendar_year :interval "20h" "date '+%Y'")
(defpoll brightness_percent :interval "5s" "brightnessctl -m -d amdgpu_bl1 | awk -F, '{print substr($4, 0, length($4)-1)}' | tr -d '%'")
(defpoll volume_percent :interval "3s" "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defpoll mic_percent :interval "3s" "amixer -D pulse sget Capture | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(deflisten workspace "hyprland-workspaces `hyprctl monitors -j | jq -r \".[0].name\"`")
(deflisten workspace1 "hyprland-workspaces `hyprctl monitors -j | jq -r \".[1].name\"`")
(defpoll user :interval "10h" "whoami")

(defpoll MER :interval "5s" `date +\"%p\"`)
(defpoll DAY :interval "5s" `date +\"%A\"`)
;;weather
(defpoll DATA :interval "15m" `~/.config/eww/scripts/weather.sh --getdata`)
(defpoll ICON :interval "15m" `~/.config/eww/scripts/weather.sh --icon`)
(defpoll STAT :interval "15m" `~/.config/eww/scripts/weather.sh --stat`)
(defpoll TEMP :interval "15m" `~/.config/eww/scripts/weather.sh --temp`)
(defpoll HEX :interval "15m" `~/.config/eww/scripts/weather.sh --hex`)
(defpoll QUOTE :interval "15m" `~/.config/eww/scripts/weather.sh --quote`)
(defpoll QUOTE2 :interval "15m" `~/.config/eww/scripts/weather.sh --quote2`)

;;uptime
(defpoll UPHOUR :interval "5s" `uptime -p | awk '{print $2 \" \" $3}' | sed 's/,//g'`)
(defpoll UPMIN :interval "5s" `uptime -p | awk '{print $4 \" \" $5}'`)

(defvar wifi_rev false)
(defvar time_rev false)
(defvar br_reveal false)
(defvar vol_reveal false)
(defvar music_reveal false)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;							Widget Section's							 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defwidget sep []
  (box :class "module-2" :vexpand "false" :hexpand "false"
    (label :class "separ" :text "|")))

(defwidget clock_module []
  (eventbox :onhover "eww update time_rev=true"
			  :onhoverlost "eww update time_rev=false"
    (box :class "module" :space-evenly "false" :orientation "h" :spacing "0" 
      (label :text clock_time :class "clock_time_class" )
      (label :text ":" :class "clock_time_sep" )
      (label :text clock_minute :class "clock_minute_class")
	  (revealer :transition "slideleft"
			  :reveal time_rev
			  :duration "350ms"
      (button :class "clock_date_class"
             :onclick "$HOME/.config/eww/scripts/pop.sh calendar" clock_date
        )
  ))))
(defwidget wifi [] 
    (eventbox :onhover "eww update wifi_rev=true" :onhoverlost "eww update wifi_rev=false"
		(box :vexpand "false" :hexpand "false" :space-evenly "false"
			(button :class "module-wif" :style "color: ${COL_WLAN};" WLAN_ICON)
	        (revealer :transition "slideright" :reveal wifi_rev :duration "350ms" (label :class "module_essid" :text ESSID_WLAN ))
        )
    )
)
(defwidget bat [status]
		(box :class "bat_module" :vexpand "false" :hexpand "false" 
            (circular-progress :value {EWW_BATTERY.BAT0.capacity}
                :class "batbar"
                :thickness 4
            (button 
                :class "iconbat"
                :onclick "scripts/pop.sh system"    
                :tooltip "battery on ${EWW_BATTERY.BAT0.capacity}%"
                {(status != "Charging" && EWW_BATTERY.BAT0.capacity < 15) ? "󰠠": "󰄯"}
            )
            )
        )
)
(defwidget mem []
		(box :class "mem_module" :vexpand "false" :hexpand "false" 
            (circular-progress :value memory
                :class "membar"
                :thickness 4
            (button 
                :class "iconmem"
                :onclick "scripts/pop.sh system"    
                :tooltip "using ${memory}% ram"
                "󰄯"
            )
            )
        )
)

(defwidget bright []
  (eventbox :onhover "eww update br_reveal=true" :onhoverlost "eww update br_reveal=false"
  (box :class "module-2" :space-evenly "false" :orientation "h" :spacing "3" 
    (label :text "" :class "bright_icon" :tooltip "brightness")
	(revealer :transition "slideleft"
			  :reveal br_reveal
			  :duration "350ms"
	(scale    :class "brightbar"
			  :value brightness_percent
			  :orientation "h"
			  :tooltip "${brightness_percent}%"
			  :max 100
			  :min 5
	 		  :onchange "brightnessctl set {}%" )))))

(defwidget volume []
  (eventbox :onhover "eww update vol_reveal=true"
			  :onhoverlost "eww update vol_reveal=false"
  (box :class "module-2" :space-evenly "false" :orientation "h" :spacing "3" 
	(button :onclick "scripts/pop.sh audio" :class "volume_icon" ""))))

(defwidget workspaces0 []
  (eventbox :onscroll "hyprctl dispatch workspace `echo {} | sed 's/up/+/\' | sed 's/down/-/'`1"
    (box :class "workspaces" :space-evenly true :halign "start"
      (for i in workspace
        (button
          :onclick "hyprctl dispatch workspace ${i.id}"
          :class "workspace_btn"
          (label :text {i.active ? "" : ""})
        )
      )
    )
  )
)
(defwidget workspaces1 []
  (eventbox :onscroll "hyprctl dispatch workspace `echo {} | sed 's/up/+/\' | sed 's/down/-/'`1"
    (box :class "workspaces" :space-evenly true :halign "start"
      (for i in workspace1
        (button
          :onclick "hyprctl dispatch workspace ${i.id}"
          :class "workspace_btn"
          (label :text {i.active ? "" : ""})
        )
      )
    )
  )
)

(defwidget arch []
		(box :class "arch_mod" :vexpand "false" :hexpand "false" 
            (button 
                :class "arch"
                :onclick "scripts/pop.sh sidebar"
                "󰣇"
            )
        )
)

(defwidget left []
    (box :orientation "h" :space-evenly false :halign "end" :class "left_modules" (bright) (volume) (wifi) (sep)(bat  :status {EWW_BATTERY.BAT0.status}) (mem) (sep) (clock_module))
)
(defwidget middle []
    (box :orientation "h" :space-evenly false :halign "center" :class "right_modules" (workspaces0))
)
(defwidget middle1 []
    (box :orientation "h" :space-evenly false :halign "center" :class "right_modules" (workspaces1))
)
(defwidget right []
    (box :orientation "h" :space-evenly false :halign "start" :class "right_modules" (arch))
)
(defwidget bar []
    (box :class "bar_class" :orientation "h" (right) (middle) (left))
)
(defwidget bar1 []
    (box :class "bar_class" :orientation "h" (right) (middle1) (left))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;							Window Section's							 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwindow bar_0 [width]
	:geometry (geometry :x "0%"
						:y "10px"
						:anchor "top center"
						:height "30px"
						:width width)
    :stacking "fg"
    :exclusive true
	(bar))

(defwindow bar_1 [width]
	:geometry (geometry :x "0%"
						:y "10px"
						:anchor "top center"
						:height "30px"
						:width width)
    :stacking "fg"
    :exclusive true
	(bar1))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;							Popup Section's							     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defwidget cal []
	(box :class "cal" :orientation "v"
	(box :class "cal-in"
	(calendar :class "cal" 
			  :day calendar_day 
			  :year calendar_year))))

(defwindow calendar
	:geometry (geometry :x "1%" 
						:y "2%" 
                        :anchor "top right"
						:width "270px" 
						:height "60px")
(cal))

(defwidget audio []
	(box :class "audio-box" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false"
	(box :halign "start" :space-evenly "false" :hexpand "false" :vexpand "false"
	(box :class "volume_icon" "")
	(box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
    (label :class "speaker_text" :text "speaker" :valign "center" :halign "start" )
	(box :class "speaker_bar" :halign "start" :vexpand "false" :hexpand "false"
	(scale    :value volume_percent
			  :orientation "h"
			  :onchange "amixer -D pulse sset Master {}%" 
              :tooltip "volume on ${volume_percent}%"
			  :max 100
			  :min 0))))
    (label :text "" :class "audio_sep" :halign "center")
	(box :halign "start" :space-evenly "false" :hexpand "false" :vexpand "false"
	(box :class "mic_icon" "")
	(box :orientation "v" :halign "start" :vexpand "false" :hexpand "false"
    (label :class "mic_text" :text "mic" :valign "center" :halign "start" )
	(box :class "mic_bar" :halign "center" :vexpand "false" :hexpand "false"
	(scale    :value mic_percent
			  :orientation "h"
              :tooltip "mic on ${mic_percent}%"
			  :onchange "amixer -D pulse sset Capture {}%" 
			  :max 100
			  :min 0))))))

(defwindow audio_ctl
	:geometry (geometry :x "8%" 
						:y "2%" 
                        :anchor "top right"
						:width "180px" 
						:height "50px")
(audio))

(defwidget system []
  (box :class "sys_win" :orientation "v" :space-evenly "false" :hexpand "false" :vexpand "false" :spacing 0
  (box :class "sys_bat_box" :orientation "h" :space-evenly "false"
      (circular-progress :value {EWW_BATTERY.BAT0.capacity}
                :class "sys_bat"
                :thickness 9
            (label :text "⏻"
                :class "sys_icon_bat"
                :limit-width 2
                :wrap false))
            (box :orientation "v" :space-evenly "false" :spacing 0 :hexpand "false" :vexpand "false"
            (label :text "battery"
                :halign "start"
                :class "sys_text_bat"
                :limit-width 9
                :wrap false)
            (label :text "${EWW_BATTERY.BAT0.capacity}%"
                :halign "start"
                :class "sys_text_bat_sub"
                :limit-width 22
                :wrap false)
            (label :text "${EWW_BATTERY.BAT0.status}"
                :halign "start"
                :class "sys_text_bat_sub"
                :limit-width 22
                :wrap false)))
            (label :text "" :class "sys_sep" :halign "center")
  (box :class "sys_mem_box" :orientation "h" :space-evenly "false" :halign "start"
      (circular-progress :value memory
                :class "sys_mem"
                :thickness 9
            (label :text ""
                :class "sys_icon_mem"
                :limit-width 2
                :wrap false
                :angle 0.0))
            (box :orientation "v" :space-evenly "false" :spacing 0 :hexpand "false" :vexpand "false"
            (label :text "memory"
                :halign "start"
                :class "sys_text_mem"
                :limit-width 9
                :wrap false)
            (label :text "${mem-ad-used}mb/${mem-ad-total}mb "
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                :wrap false)
            (label :text "${mem-ad-free}mb free"
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                :wrap false)))))

(defwindow system
	:geometry (geometry :x "20px" 
						:y "2%" 
                        :anchor "top right"
						:width "290px" 
						:height "120px")
(system))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;							Leftbar Section's							     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defwidget sidebar []
  (box :class "profile" :orientation "v"
        (label :class "profile_image")
        (box :class "profile_info" :orientation "v" :space-evenly "false"
         (label :class "user_info" :text user)
            (label :class "arch_info" :text "ArchLinux")
        )
  )
)

(defwidget weather []
  (box :class "menu_class" 
		(box :orientation "v" :spacing 10 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :orientation "h" :vexpand "false" :hexpand "false" 
				(label :class "iconweather" :halign "start" :style "color: ${HEX};" :text ICON)
				(label :class "label_temp" :halign "end" :text TEMP))
			(box :orientation "v" :spacing 10 :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "label_stat" :text STAT)
				(label :class "label_quote" :text QUOTE)
				(label :class "label_quote" :text QUOTE2))))
)
(defwidget timer []
  (box :class "profile" :orientation "v"
  )
)
(defwidget search []
  (box :class "profile" :orientation "v"
  )
)
(defwidget options []
    (box :class "menu_class" :orientation "h"
        (box :class "menu_system" :orientation "v" :space-evenly "false"
            (button :class "poweroff_icon_menu"
                :onclick "poweroff"
                "⏻")
            (button :class "lock_icon_menu"
                :onclick "scripts/hyprlock_dispatcher.sh"
                "󰍁")
            (button :class "suspend_icon_menu"
                :onclick "hyprlock & systemctl suspend"
                "󰤄")
            (button :class "reboot_icon_menu"
                :onclick "reboot"
                "")
            (button :class "exit_icon_menu"
                :onclick "hyprctl dispatch exit"
                "󰈆")
            (button :class "theme_icon_menu"
                :onclick ""
                "")
        )
    )
)

(defwidget uptime [] 
	(box :class "menu_class" 
		(box :orientation "h" :halign "center" :spacing 40 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(label :class "icontimer" :valign "center" :text "")
			(box :orientation "v" :valign "center" :spacing 0 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "uphour" :halign "start" :wrap "true" :limit-width 25 :text UPHOUR)
				(label :class "upmin" :halign "start" :wrap "true" :limit-width 25 :text UPMIN)))))
(defwidget clock [] 
	(box :class "menu_class" :orientation "h" :spacing 50 :space-evenly false :vexpand "false" :hexpand "false" 
		(box :orientation "h" :spacing 0 :space-evenly false
			(label :class "time_hour" :valign "center" :text clock_time)
            (label :text ":" :class "time_min" )
			(label :class "time_min" :text clock_minute))
		(box :orientation "v" :spacing 0 
			(label :class "time_day" :valign "center" :halign "end" :wrap "true" :limit-width 25 :text DAY))))

(defwindow sidebar
	:geometry (geometry :x "25%" 
						:y "20%" 
                        :anchor "top left"
						:width "14.5%" 
						:height "44.5%")
(sidebar))

(defwindow weather
	:geometry (geometry :x "40%" 
						:y "20%" 
                        :anchor "top left"
						:width "25%" 
						:height "24.5%")
(weather))

(defwindow timer
	:geometry (geometry :x "40%" 
						:y "45%" 
                        :anchor "top left"
						:width "25%" 
						:height "19.5%")
(uptime))

(defwindow search
	:geometry (geometry :x "25%" 
						:y "65%" 
                        :anchor "top left"
						:width "40%" 
						:height "10%")
(clock))

(defwindow options
	:geometry (geometry :x "65.5%" 
						:y "20%" 
                        :anchor "top left"
						:width "4%" 
						:height "55.1%")
(options))
