(defwindow bar0
    :monitor 0
    :geometry (geometry :x "0%" :y "8px" :width "98%" :height "10px" :anchor "top center")
    :stacking "bg"
    :exclusive true
    :windowtype "dock"
    (bar_layout0)
)

(defwindow bar1
    :monitor 1
    :geometry (geometry :x "0%" :y "10px" :width "131%" :height "20px" :anchor "top center")
    :stacking "bg"
    :exclusive true
    :windowtype "dock"
    (bar_layout1)
)

(defwidget bar_layout0 []
    (centerbox :class "layout-box" :orientation "h"
        (center)
        (workspaces0)
        (right)
    )
)
(defwidget bar_layout1 []
    (centerbox :class "layout-box" :orientation "h"
        (center)
        (workspaces1)
        (right)
    )
)

(deflisten workspace0 "hyprland-workspaces `hyprctl monitors -j | jq -r \".[0].name\"`")
(deflisten workspace1 "hyprland-workspaces `hyprctl monitors -j | jq -r \".[1].name\"`")

(defpoll net :interval "10s"
    :initial `N/A`
    `nmcli -t -f SIGNAL,ACTIVE device wifi \
        | awk -F':' '{if($2 == "ja")print $1}'`
)

(defpoll time :interval "1s"
    :initial `date +'{"hour":"%H","min":"%M"}'`
    `date +'{"hour":"%H","min":"%M"}'`
)

(defpoll date :interval "1m"
    :initial `date +'{"day":"%d","month":"%m","year":"%Y"}'`
    `date +'{"day":"%d","month":"%m","year":"%Y"}'`
)

(defwidget center []
    (box :class "center-box" :orientation "h" :space-evenly false :halign "center"
        (label :text ".")
    )
)

(defwidget right []
    (box :class "right-box" :orientation "h" :space-evenly false :halign "end"
        (_network :strength net :offline "󰤯" :excellent "󰤨" :good "󰤥" :okay "󰤢" :slow "󰤟")
        (label :class "date-icon" :text "󰃭")
        (label :class "date-box" :text "${date.day}/${date.month}/${date.year}")
        (label :class "clock-box" :text "󰥔")
        (label :class "time-box" :text "${time.hour}:${time.min}")
        (_battery :status {EWW_BATTERY.BAT0.status} :battery {EWW_BATTERY.BAT0.capacity}
         :one "󰁹" :two "󰂂" :three "󰂀" :four "󰁾" :five "󰁼" :six "󰁺" :seven "󰂃" :charge "󰂄"
        )
        (label :class "percent-box" :text "${EWW_BATTERY.BAT0.capacity}%")
        (_shutdown :shutdown "poweroff" :shutdown_icon "")
    )
)
(defwidget _network [strength offline excellent good okay slow]
    (box    :class "net-box"
            :space-evenly false
            :spacing 8
            (label :text {strength == "" ? offline :
                strength <26 ? slow :
                    strength <51 ? okay :
                        strength <76 ? good : excellent}
            )
    )
)

(defwidget _shutdown [shutdown shutdown_icon]
    (box    :class "logout-box"
            :space-evenly false
            :spacing 8
            (button :onclick shutdown shutdown_icon)
    )
)

(defwidget _battery [battery status one two three four five six seven charge]
    (box    :class "bat-box"
            :space-evenly false
            :spacing 8
            (label :text  {status == "Charging" ? charge :
                battery < 15 ? seven :
                    battery < 38 ? six :
                        battery < 45 ? five :
                            battery < 60 ? four :
                                battery < 75 ? three :
                                    battery < 95 ? two : one}
            )
    )
)

(defwidget workspaces0 []
  (eventbox :onscroll "hyprctl dispatch workspace `echo {} | sed 's/up/+/\' | sed 's/down/-/'`1"
    (box :class "workspaces" :orintation "h" :space-evenly true :halign "start"
      (for i in workspace0
        (button
          :onclick "hyprctl dispatch workspace ${i.id}"
          :class "_workspace_btn"
          (label :text {i.active ? "" : ""})
        )
      )
    )
  )
)

(defwidget workspaces1 []
  (eventbox :onscroll "hyprctl dispatch workspace `echo {} | sed 's/up/+/\' | sed 's/down/-/'`1"
   (box :class "workspaces" :orintation "h" :space-evenly true :halign "start"
      (for i in workspace1
        (button
          :onclick "hyprctl dispatch workspace ${i.id}"
          :class "_workspace_btn"
          (label :text {i.active ? "" : ""})
        )
      )
    )
  )
)
